{
    "hpp":
    {
      "prefix": "hpp",
      "description": "hpp",
      "body":
      [
        "#pragma once",
        "",
        "namespace be {",
        "    class ${TM_FILENAME_BASE} {",
        "    private:",
        "    public:",
        "        ${TM_FILENAME_BASE}() ;",
        "    } ;",
        "}"
      ]
    },
    "cpp":
    {
      "prefix": "cpp",
      "description": "cpp",
      "body":
      [
        "#include \"${TM_FILENAME_BASE}.hpp\"",
        "using namespace std;",
        "",
        "",
        "namespace be {",
        "    ${TM_FILENAME_BASE}::${TM_FILENAME_BASE}() {",
        "",
        "    }",
        "}"
      ]
    },
    
    
    "nclass-hpp":
    {
        "prefix": "nclasshpp",
        "description": "BeShell Native Class header file (.hpp)",
        "body":
        [
            "#pragma once" ,
            "" ,
            "#include <NativeClass.hpp>" ,
            "" ,
            "class ${TM_FILENAME_BASE}: public be::NativeClass {" ,
            "    DECLARE_NCLASS_META" ,
            "    static std::vector<JSCFunctionListEntry> methods ;" ,
            "    // static std::vector<JSCFunctionListEntry> staticMethods ;" ,
            "" ,
            "public:",
            "    ${TM_FILENAME_BASE}(JSContext * ctx) ;" ,
            "" ,
            "    static JSValue constructor(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) ;"
            "    static JSValue jsMethod(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) ;" ,
            "" ,
            "} ;" ,
        ]
    },
    "nclass-cpp":
    {
        "prefix": "nclasscpp",
        "description": "BeShell Native Class source file (.cpp)",
        "body":
        [
            "#include \"${TM_FILENAME_BASE}.hpp\"",
            "" ,
            "using namespace std ;",
            "" ,
            "DEFINE_NCLASS_META(${TM_FILENAME_BASE}, NativeClass)",
            "std::vector<JSCFunctionListEntry> ${TM_FILENAME_BASE}::methods = {",
            "    JS_CFUNC_DEF(\"method\", 0, ${TM_FILENAME_BASE}::jsMethod),",
            "} ;",
            "" ,
            "${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(JSContext * ctx)",
            "    : NativeClass(ctx)",
            "{",
            "}",
            "" ,
            "JSValue ${TM_FILENAME_BASE}::constructor(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {" ,
            "    auto obj = new ${TM_FILENAME_BASE}(ctx) ;" ,
            "    obj->self = std::shared_ptr<${TM_FILENAME_BASE}> (obj) ;" ,
            "    return obj->jsobj ;" ,
            "}" ,
            "" ,
            "JSValue ${TM_FILENAME_BASE}::jsMethod(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {",
            "    return JS_UNDEFINED ;",
            "}",
        ]
    }
    
    , "nmodule-hpp":
    {
        "prefix": "nmodulehpp",
        "description": "BeShell Native Module header file (.hpp)",
        "body":
        [
            "#pragma once" ,
            "" ,
            "#include \"BeShell.hpp\"" ,
            "#include \"NativeModule.hpp\"" ,
            "" ,
            "class ${TM_FILENAME_BASE}: public be::NativeModule {" ,
            "public:" ,
            "    ${TM_FILENAME_BASE}(JSContext * ctx, const char * name) ;" ,
            "" ,
            "    \/\/ void import() ;" ,
            "" ,
            "    inline static void use(be::BeShell & beshell) {",
            "        beshell.addModule<${TM_FILENAME_BASE}>(\"${TM_FILENAME_BASE/(.+)/${1:/downcase}/g}\") ;",
            "    }" ,
            "" ,
            "    static JSValue jsFunc(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) ;" ,
            "} ;" ,
            ""
        ]
    }
    
    , "nmodule-cpp":
    {
        "prefix": "nmodulecpp",
        "description": "BeShell Native Module source file (.cpp)",
        "body":
        [
            "#include \"${TM_FILENAME_BASE}.hpp\"" ,
            "" ,
            "${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(JSContext * ctx, const char * name)",
            "    : NativeModule(ctx, name, 0)",
            "{",
            "    \/\/ exportClass<ClassName>() ;",
            "    exportFunction(\"func\",jsFunc,0) ;",
            "}",
            "" ,
            "\/\/ void ${TM_FILENAME_BASE}::import() {",
            "\/\/ }",
            "" ,
            "JSValue ${TM_FILENAME_BASE}::jsFunc(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {" ,
            "    return JS_UNDEFINED ;" ,
            "}" ,
            ""
        ]
    }
  }